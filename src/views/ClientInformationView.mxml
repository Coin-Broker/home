<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 height="100%" width="100%" xmlns:local="*" xmlns:components="components.*" >
	
	<fx:Declarations>
		<s:NumberValidator source="{dollarAmount}" property="text" maxValue="9999999.99" required="false"/> 
		<mx:PhoneNumberValidator source="{phoneInput.inputField}" property="text"/>
		<s:NumberFormatter id="currencyFormatter" fractionalDigits="2" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.utils.ObjectUtil;
			
			import spark.events.TextOperationEvent;
			
			import model.ClientVO;
			import model.ModelLocator;
			
			import services.ServiceDelegate;
			import services.Services;
			
			private var _client:ClientVO; 
			[Bindable]
			private var clientCoins:ArrayCollection;
			
			[Bindable]
			public var editing:Boolean = false;
			
			[Bindable]
			public function get client():ClientVO
			{
				return _client;
			}

			public function set client(value:ClientVO):void
			{
				_client = value;
				if(value.coins != null)
					clientCoins = new ArrayCollection(value.coins.source);
				else
					clientCoins = null;
			}

			protected function subFunds(event:MouseEvent):void
			{
				if(client.accountBalance < Number(dollarAmount.text))
				{
					Alert.show("Error not enough funds");
					return;
				}
				
				var params:* = new Object();
				params["clientId"]  = client.id;
				params["amount"] = -Number(dollarAmount.text);
				params["coin"] = "Balance";
				params["numberShares"] = params["amount"];
				params["pricePerShare"] = 1
				params["commisionAmount"] = 0;
				params["brokerID"] = ModelLocator.getInstance().currentUser.id;
					
				
				new ServiceDelegate(Services.addSubFunds, null, params);
				new ServiceDelegate(Services.addTransaction, null, params);
				
				client.accountBalance -= Number(dollarAmount.text);
				
			}
			
			protected function addFunds(event:MouseEvent):void
			{
				var params:* = new Object();
				params["clientId"]  = client.id;
				params["amount"] = Number(dollarAmount.text);
				params["coin"] = "Balance";
				params["numberShares"] = 0;
				params["pricePerShare"] = 1;
				params["commisionAmount"] = 0;
				params["brokerID"] = ModelLocator.getInstance().currentUser.id;
					
				new ServiceDelegate(Services.addSubFunds, null, params);
				new ServiceDelegate(Services.addTransaction, null, params);
				
				client.accountBalance += Number(dollarAmount.text);
				
			}
			
			protected function buyStock(event:MouseEvent):void
			{
				var params:* = new Object();
				params["clientId"]  = client.id;
				params["numberOfShares"] = Number(numShares.text);
				params["coinSymbol"] = ModelLocator.getInstance().selectedCoin.symbol;
				params["price"] = ModelLocator.getInstance().selectedCoin.price;
				
				new ServiceDelegate(Services.sellStock, null, params);
				
			}
			
			protected function sellStock(event:MouseEvent):void
			{
				var params:* = new Object();
				params["clientId"]  = client.id;
				params["numberOfShares"] = -Number(numShares.text);
				params["coinSymbol"] = ModelLocator.getInstance().selectedCoin.symbol;
				params["price"] = ModelLocator.getInstance().selectedCoin.price;
				
				new ServiceDelegate(Services.sellStock, null, params);
				
			}
			
		]]>
	</fx:Script>
	
	<s:Rect id="background" height="100%" width="100%">
		<s:fill>
			<s:SolidColor color="#cccccc"/>
		</s:fill>
	</s:Rect>
	<s:VGroup height="100%" width="100%"
			  left="10" right="10" top="10" bottom="10">
		<s:HGroup width="100%" >
			<components:HNameValueLabel label="ID: " 
								   value="{client.id}"/>
			<s:Spacer width="100%"/>
			<components:HNameValueLabel label="Name: "
								   editable="{editing}"
								   value="{client.firstName + ' ' + client.lastName}"/>
		</s:HGroup>
		<s:HGroup width="100%">
			<components:HNameValueLabel label="Address: " 
								   editable="{editing}"
								   value="{client.address}"/>
			<s:Spacer width="100%"/>			
			<components:HNameValueLabel label="City: "
								   editable="{editing}"
								   value="{client.city}"/>
			<s:Spacer width="100%"/>			
			<components:HNameValueLabel label="State: "
								   editable="{editing}"
								   value="{client.state}"/>
		</s:HGroup>
		<s:HGroup width="100%">
			<components:HNameValueLabel id="phoneInput" 
										label="Phone: "
								  		editable="{editing}"
								   		value="{client.phone}"/>
			<s:Spacer width="100%"/>
			<components:HNameValueLabel label="Balance: "
								   editable="false"
								   value="{currencyFormatter.format(client.accountBalance)}"/>
			<s:Spacer width="100%"/>
			<components:HNameValueLabel label="PIN: "
								   editable="{editing}"
								   value="{client.pinCode}"/>
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label text="Number of Shares: " fontWeight="bold"/>
			<s:TextInput id="numShares" prompt="Number of shares" width="33%" restrict="[0-9]" editable="{client != null}"/>
			<s:Button label="Buy" width="33%" click="buyStock(event)"/>
			<s:Button label="Sell" width="33%" click="sellStock(event)"/>
		</s:HGroup>
		<s:HGroup width="100%">
			<s:TextInput prompt="Amount to Withdraw or Add" 
						 editable="{client != null}"
						 id="dollarAmount"
						 width="33%"
						 restrict="[0-9.]"/>
			<s:Button label="Add Funds" width="33%" click="addFunds(event)"/>
			<s:Button label="Withdraw Funds" width="33%" click="subFunds(event)" />
		</s:HGroup>
		<s:HGroup width="100%">
			<s:Button label="{editing? 'Save' : 'Update Info'}" click="{editing=!editing}"/>			
		</s:HGroup>
		
		<components:DataGirdWithSearch dataProvider="{clientCoins}" prompt="Coin Search" >			
			<components:columns>
				<s:ArrayList>
					<s:GridColumn dataField="name" headerText="Coin"/>
					<s:GridColumn dataField="symbol" headerText="Symbol"/>
					<s:GridColumn dataField="count" headerText="Quanity"/>
					<s:GridColumn dataField="basis" headerText="Basis"/>
				</s:ArrayList>
			</components:columns>
		</components:DataGirdWithSearch>

		
	</s:VGroup>
	
</s:Group>
